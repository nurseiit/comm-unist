package kr.or.kisa.seed;

import android.support.v4.media.TransportMediator;
import android.support.v4.view.MotionEventCompat;
import com.google.android.gms.drive.MetadataChangeSet;

public class Seedx {
    private static Boolean BIG = Boolean.valueOf(true);
    private static Boolean ENDIAN = BIG;
    private static int[] KC = new int[]{-1640531527, 1013904243, 2027808486, -239350324, -478700647, -957401293, -1914802585, 465362127, 930724254, 1861448508, -572070280, -1144140559, 2006686179, -281594938, -563189875, -1126379749};
    private static Boolean LITTLE = Boolean.valueOf(false);
    private static int NoRounds = 16;
    private static int[] SS0;
    private static int[] SS1;
    private static int[] SS2;
    private static int[] SS3;
    private final int NoRoundKeys = 32;
    private final int SeedBlockLen = 128;
    private final int SeedBlockSize = 16;

    private static int EndianChange(int i) {
        return ((i >>> 8) & MotionEventCompat.ACTION_POINTER_INDEX_MASK) | (((i >>> 24) | (i << 24)) | ((i << 8) & 16711680));
    }

    private static int GetB0(int i) {
        return i & 255;
    }

    private static int GetB1(int i) {
        return (i >>> 8) & 255;
    }

    private static int GetB2(int i) {
        return (i >>> 16) & 255;
    }

    private static int GetB3(int i) {
        return (i >>> 24) & 255;
    }

    static {
        int[] iArr = new int[256];
        iArr[0] = 696885672;
        iArr[1] = 92635524;
        iArr[2] = 382128852;
        iArr[3] = 331600848;
        iArr[4] = 340021332;
        iArr[5] = 487395612;
        iArr[6] = 747413676;
        iArr[7] = 621093156;
        iArr[8] = 491606364;
        iArr[9] = 54739776;
        iArr[10] = 403181592;
        iArr[11] = 504238620;
        iArr[12] = 289493328;
        iArr[13] = 1020063996;
        iArr[14] = 181060296;
        iArr[15] = 591618912;
        iArr[16] = 671621160;
        iArr[17] = 71581764;
        iArr[18] = 536879136;
        iArr[19] = 495817116;
        iArr[20] = 549511392;
        iArr[21] = 583197408;
        iArr[22] = 147374280;
        iArr[23] = 386339604;
        iArr[24] = 629514660;
        iArr[25] = 261063564;
        iArr[26] = 50529024;
        iArr[27] = 994800504;
        iArr[28] = 999011256;
        iArr[29] = 318968592;
        iArr[30] = 314757840;
        iArr[31] = 785310444;
        iArr[32] = 809529456;
        iArr[33] = 210534540;
        iArr[34] = 1057960764;
        iArr[35] = 680042664;
        iArr[36] = 839004720;
        iArr[37] = 500027868;
        iArr[38] = 919007988;
        iArr[39] = 876900468;
        iArr[40] = 751624428;
        iArr[41] = 361075092;
        iArr[42] = 185271048;
        iArr[43] = 390550356;
        iArr[44] = 474763356;
        iArr[45] = 457921368;
        iArr[46] = 1032696252;
        iArr[47] = 16843008;
        iArr[48] = 604250148;
        iArr[49] = 470552604;
        iArr[50] = 860058480;
        iArr[51] = 411603096;
        iArr[52] = 268439568;
        iArr[53] = 214745292;
        iArr[54] = 851636976;
        iArr[55] = 432656856;
        iArr[56] = 738992172;
        iArr[57] = 667411428;
        iArr[58] = 843215472;
        iArr[59] = 58950528;
        iArr[60] = 462132120;
        iArr[61] = 297914832;
        iArr[62] = 109478532;
        iArr[63] = 164217288;
        iArr[64] = 541089888;
        iArr[65] = 272650320;
        iArr[66] = 595829664;
        iArr[67] = 734782440;
        iArr[68] = 218956044;
        iArr[69] = 914797236;
        iArr[70] = 512660124;
        iArr[71] = 256852812;
        iArr[72] = 931640244;
        iArr[73] = 441078360;
        iArr[74] = 113689284;
        iArr[75] = 944271480;
        iArr[76] = 646357668;
        iArr[77] = 302125584;
        iArr[78] = 797942700;
        iArr[79] = 365285844;
        iArr[80] = 557932896;
        iArr[81] = 63161280;
        iArr[82] = 881111220;
        iArr[83] = 21053760;
        iArr[84] = 306336336;
        iArr[85] = 1028485500;
        iArr[86] = 227377548;
        iArr[87] = 134742024;
        iArr[88] = 521081628;
        iArr[89] = 428446104;
        iArr[91] = 420024600;
        iArr[92] = 67371012;
        iArr[93] = 323179344;
        iArr[94] = 935850996;
        iArr[95] = 566354400;
        iArr[96] = 1036907004;
        iArr[97] = 910586484;
        iArr[98] = 789521196;
        iArr[99] = 654779172;
        iArr[100] = 813740208;
        iArr[101] = 193692552;
        iArr[102] = 235799052;
        iArr[103] = 730571688;
        iArr[104] = 578986656;
        iArr[105] = 776888940;
        iArr[106] = 327390096;
        iArr[107] = 223166796;
        iArr[108] = 692674920;
        iArr[109] = 1011642492;
        iArr[110] = 151585032;
        iArr[111] = 168428040;
        iArr[112] = 1066382268;
        iArr[113] = 802153452;
        iArr[114] = 868479984;
        iArr[115] = 96846276;
        iArr[116] = 126321540;
        iArr[117] = 335810580;
        iArr[118] = 1053750012;
        iArr[119] = 608460900;
        iArr[120] = 516870876;
        iArr[121] = 772678188;
        iArr[122] = 189481800;
        iArr[123] = 436867608;
        iArr[MetadataChangeSet.CUSTOM_PROPERTY_SIZE_LIMIT_BYTES] = 101057028;
        iArr[125] = 553722144;
        iArr[TransportMediator.KEYCODE_MEDIA_PLAY] = 726360936;
        iArr[TransportMediator.KEYCODE_MEDIA_PAUSE] = 642146916;
        iArr[128] = 33686016;
        iArr[129] = 902164980;
        iArr[TransportMediator.KEYCODE_MEDIA_RECORD] = 310547088;
        iArr[131] = 176849544;
        iArr[132] = 202113036;
        iArr[133] = 864269232;
        iArr[134] = 1045328508;
        iArr[135] = 281071824;
        iArr[136] = 977957496;
        iArr[137] = 122110788;
        iArr[138] = 377918100;
        iArr[139] = 633725412;
        iArr[140] = 637936164;
        iArr[141] = 8421504;
        iArr[142] = 764256684;
        iArr[143] = 533713884;
        iArr[144] = 562143648;
        iArr[145] = 805318704;
        iArr[146] = 923218740;
        iArr[147] = 781099692;
        iArr[148] = 906375732;
        iArr[149] = 352653588;
        iArr[150] = 570565152;
        iArr[151] = 940060728;
        iArr[152] = 885321972;
        iArr[153] = 663200676;
        iArr[154] = 88424772;
        iArr[155] = 206323788;
        iArr[156] = 25264512;
        iArr[157] = 701096424;
        iArr[158] = 75792516;
        iArr[159] = 394761108;
        iArr[160] = 889532724;
        iArr[161] = 197903304;
        iArr[162] = 248431308;
        iArr[163] = 1007431740;
        iArr[164] = 826372464;
        iArr[165] = 285282576;
        iArr[166] = 130532292;
        iArr[167] = 160006536;
        iArr[168] = 893743476;
        iArr[169] = 1003222008;
        iArr[170] = 449499864;
        iArr[171] = 952692984;
        iArr[172] = 344232084;
        iArr[173] = 424235352;
        iArr[174] = 42107520;
        iArr[175] = 80003268;
        iArr[176] = 1070593020;
        iArr[177] = 155795784;
        iArr[178] = 956903736;
        iArr[179] = 658989924;
        iArr[180] = 12632256;
        iArr[181] = 265274316;
        iArr[182] = 398971860;
        iArr[183] = 948482232;
        iArr[184] = 252642060;
        iArr[185] = 244220556;
        iArr[186] = 37896768;
        iArr[187] = 587408160;
        iArr[188] = 293704080;
        iArr[189] = 743202924;
        iArr[190] = 466342872;
        iArr[191] = 612671652;
        iArr[192] = 872689716;
        iArr[193] = 834793968;
        iArr[194] = 138952776;
        iArr[195] = 46318272;
        iArr[196] = 793731948;
        iArr[197] = 1024274748;
        iArr[198] = 755835180;
        iArr[199] = 4210752;
        iArr[200] = 1049539260;
        iArr[201] = 1041117756;
        iArr[202] = 1015853244;
        iArr[203] = 29475264;
        iArr[204] = 713728680;
        iArr[205] = 982168248;
        iArr[206] = 240009804;
        iArr[207] = 356864340;
        iArr[208] = 990589752;
        iArr[209] = 483184860;
        iArr[210] = 675831912;
        iArr[211] = 1062171516;
        iArr[212] = 478974108;
        iArr[213] = 415813848;
        iArr[214] = 172638792;
        iArr[215] = 373707348;
        iArr[216] = 927429492;
        iArr[217] = 545300640;
        iArr[218] = 768467436;
        iArr[219] = 105267780;
        iArr[220] = 897954228;
        iArr[221] = 722150184;
        iArr[222] = 625303908;
        iArr[223] = 986379000;
        iArr[224] = 600040416;
        iArr[225] = 965325240;
        iArr[226] = 830583216;
        iArr[227] = 529503132;
        iArr[228] = 508449372;
        iArr[229] = 969535992;
        iArr[230] = 650568420;
        iArr[231] = 847426224;
        iArr[232] = 822161712;
        iArr[233] = 717939432;
        iArr[234] = 760045932;
        iArr[235] = 525292380;
        iArr[236] = 616882404;
        iArr[237] = 817950960;
        iArr[238] = 231588300;
        iArr[239] = 143163528;
        iArr[240] = 369496596;
        iArr[241] = 973746744;
        iArr[242] = 407392344;
        iArr[243] = 348442836;
        iArr[244] = 574775904;
        iArr[245] = 688464168;
        iArr[246] = 117900036;
        iArr[247] = 855847728;
        iArr[248] = 684253416;
        iArr[249] = 453710616;
        iArr[250] = 84214020;
        iArr[251] = 961114488;
        iArr[252] = 276861072;
        iArr[253] = 709517928;
        iArr[254] = 705307176;
        iArr[255] = 445289112;
        SS0 = iArr;
        iArr = new int[256];
        iArr[0] = 943196208;
        iArr[1] = -399980320;
        iArr[2] = 741149985;
        iArr[3] = -1540979038;
        iArr[4] = -871379005;
        iArr[5] = -601960750;
        iArr[6] = -1338801229;
        iArr[7] = -1204254544;
        iArr[8] = -1406169181;
        iArr[9] = 1612726368;
        iArr[10] = 1410680145;
        iArr[11] = -1006123069;
        iArr[12] = 1141130304;
        iArr[13] = 1815039843;
        iArr[14] = 1747667811;
        iArr[15] = 1478183763;
        iArr[16] = -1073495101;
        iArr[17] = 1612857954;
        iArr[18] = 808649523;
        iArr[19] = -1271560783;
        iArr[20] = 673777953;
        iArr[21] = -1608482656;
        iArr[22] = -534592798;
        iArr[23] = -1540913245;
        iArr[24] = -804011053;
        iArr[25] = -1877900911;
        iArr[26] = 269549841;
        iArr[27] = 67503618;
        iArr[28] = 471600144;
        iArr[29] = -1136882512;
        iArr[30] = 875955762;
        iArr[31] = 1208699715;
        iArr[32] = -332410909;
        iArr[33] = -2012706688;
        iArr[34] = 1814842464;
        iArr[35] = -1473738592;
        iArr[36] = 337053459;
        iArr[37] = -1006320448;
        iArr[38] = 336987666;
        iArr[39] = -197868304;
        iArr[40] = -1073560894;
        iArr[41] = 1141196097;
        iArr[42] = -534658591;
        iArr[43] = -736704814;
        iArr[44] = 1010765619;
        iArr[45] = 1010634033;
        iArr[46] = -1945203070;
        iArr[47] = -1743222640;
        iArr[48] = 673712160;
        iArr[49] = 1276005954;
        iArr[50] = -197736718;
        iArr[51] = 1010699826;
        iArr[52] = -1541044831;
        iArr[53] = -130430479;
        iArr[54] = 202181889;
        iArr[55] = -601894957;
        iArr[56] = -669464368;
        iArr[57] = 673909539;
        iArr[58] = 1680229986;
        iArr[59] = 2017086066;
        iArr[60] = 606537507;
        iArr[61] = 741281571;
        iArr[62] = -265174543;
        iArr[63] = 1882342002;
        iArr[64] = 1073889858;
        iArr[65] = -736836400;
        iArr[66] = 1073824065;
        iArr[67] = -1073692480;
        iArr[68] = 1882407795;
        iArr[69] = 1680295779;
        iArr[70] = -1406366560;
        iArr[71] = -2012509309;
        iArr[72] = -197670925;
        iArr[73] = -1406300767;
        iArr[74] = -2147450752;
        iArr[75] = 471797523;
        iArr[76] = -938816830;
        iArr[77] = 741084192;
        iArr[78] = -1473607006;
        iArr[79] = 875824176;
        iArr[80] = -804076846;
        iArr[81] = 134941443;
        iArr[82] = -332476702;
        iArr[83] = -399914527;
        iArr[84] = 1545424209;
        iArr[85] = -1810594672;
        iArr[86] = 404228112;
        iArr[87] = -130496272;
        iArr[88] = 1410811731;
        iArr[89] = -1406234974;
        iArr[90] = 134744064;
        iArr[91] = -1006254655;
        iArr[92] = 269681427;
        iArr[93] = -871510591;
        iArr[94] = -2079947134;
        iArr[95] = -1204188751;
        iArr[96] = -62926861;
        iArr[97] = 2084392305;
        iArr[98] = -1073626687;
        iArr[99] = 808517937;
        iArr[100] = -197802511;
        iArr[101] = -2012575102;
        iArr[102] = 1747602018;
        iArr[103] = -1338932815;
        iArr[104] = -804142639;
        iArr[105] = 538968096;
        iArr[106] = -736639021;
        iArr[107] = 131586;
        iArr[108] = 539099682;
        iArr[109] = 67372032;
        iArr[110] = 1747470432;
        iArr[111] = 1882276209;
        iArr[112] = 67569411;
        iArr[113] = -669266989;
        iArr[114] = -1675784815;
        iArr[115] = -1743156847;
        iArr[116] = 1612792161;
        iArr[117] = -1136750926;
        iArr[118] = -467220766;
        iArr[119] = 1478052177;
        iArr[120] = -602026543;
        iArr[121] = 1343308113;
        iArr[122] = -1877966704;
        iArr[123] = -602092336;
        iArr[MetadataChangeSet.CUSTOM_PROPERTY_SIZE_LIMIT_BYTES] = -1743091054;
        iArr[125] = -1608285277;
        iArr[TransportMediator.KEYCODE_MEDIA_PLAY] = -1473541213;
        iArr[TransportMediator.KEYCODE_MEDIA_PAUSE] = -804208432;
        iArr[128] = -2147384959;
        iArr[129] = 202313475;
        iArr[TransportMediator.KEYCODE_MEDIA_RECORD] = 1141327683;
        iArr[131] = 404359698;
        iArr[132] = -534527005;
        iArr[133] = -332608288;
        iArr[134] = -1945268863;
        iArr[135] = -1136685133;
        iArr[136] = -1810463086;
        iArr[137] = 2017151859;
        iArr[138] = 1545358416;
        iArr[139] = -1608351070;
        iArr[140] = -1608416863;
        iArr[141] = 1612923747;
        iArr[142] = 539165475;
        iArr[143] = 1275940161;
        iArr[144] = -938948416;
        iArr[145] = -1675719022;
        iArr[146] = -1675850608;
        iArr[147] = 943327794;
        iArr[148] = 202116096;
        iArr[149] = 741215778;
        iArr[150] = -1204122958;
        iArr[151] = 1814974050;
        iArr[152] = -1675653229;
        iArr[153] = 1478117970;
        iArr[154] = -265108750;
        iArr[155] = -1877835118;
        iArr[156] = -265042957;
        iArr[157] = 1208568129;
        iArr[158] = 2016954480;
        iArr[159] = -871576384;
        iArr[160] = 336921873;
        iArr[161] = -130298893;
        iArr[162] = 1882210416;
        iArr[163] = 1949648241;
        iArr[164] = 2084523891;
        iArr[165] = 875889969;
        iArr[166] = 269484048;
        iArr[167] = 197379;
        iArr[168] = 1680098400;
        iArr[169] = 1814908257;
        iArr[170] = -1006188862;
        iArr[171] = 1949582448;
        iArr[172] = -736770607;
        iArr[173] = -1271626576;
        iArr[174] = -399848734;
        iArr[175] = 134809857;
        iArr[176] = 1949714034;
        iArr[177] = 404293905;
        iArr[178] = -62992654;
        iArr[179] = 1073758272;
        iArr[180] = 269615634;
        iArr[181] = -534724384;
        iArr[182] = -1136816719;
        iArr[183] = 67437825;
        iArr[184] = -130364686;
        iArr[185] = 65793;
        iArr[186] = -265240336;
        iArr[187] = 673843746;
        iArr[188] = 1545490002;
        iArr[189] = -1473672799;
        iArr[190] = 1410745938;
        iArr[191] = 1073955651;
        iArr[192] = -2080012927;
        iArr[193] = 336856080;
        iArr[194] = -2012640895;
        iArr[195] = -1743025261;
        iArr[196] = -1338998608;
        iArr[197] = -467286559;
        iArr[198] = 1208502336;
        iArr[199] = 2017020273;
        iArr[200] = -1810397293;
        iArr[201] = -63124240;
        iArr[202] = 471731730;
        iArr[203] = -2147319166;
        iArr[204] = 539033889;
        iArr[205] = -1945334656;
        iArr[206] = 404425491;
        iArr[207] = 1545555795;
        iArr[208] = 1949779827;
        iArr[209] = 1410614352;
        iArr[210] = -1338867022;
        iArr[211] = 471665937;
        iArr[212] = 606405921;
        iArr[213] = 1276071747;
        iArr[215] = 1141261890;
        iArr[216] = -332542495;
        iArr[217] = 1477986384;
        iArr[218] = 1343373906;
        iArr[219] = -399782941;
        iArr[220] = 2084458098;
        iArr[221] = -669332782;
        iArr[222] = -938882623;
        iArr[223] = -63058447;
        iArr[224] = 808452144;
        iArr[225] = -1810528879;
        iArr[226] = 1680164193;
        iArr[227] = 1010568240;
        iArr[228] = -1271494990;
        iArr[229] = -467352352;
        iArr[230] = -1204057165;
        iArr[231] = 2084326512;
        iArr[232] = 202247682;
        iArr[233] = 1343242320;
        iArr[234] = 943262001;
        iArr[235] = 606471714;
        iArr[236] = 808583730;
        iArr[237] = -2080078720;
        iArr[238] = 1747536225;
        iArr[239] = -1877769325;
        iArr[240] = 876021555;
        iArr[241] = -467154973;
        iArr[242] = 606340128;
        iArr[243] = -1541110624;
        iArr[244] = -938751037;
        iArr[245] = 1343439699;
        iArr[246] = 134875650;
        iArr[247] = -2079881341;
        iArr[248] = -669398575;
        iArr[249] = 1275874368;
        iArr[250] = -2147253373;
        iArr[251] = -1945137277;
        iArr[252] = -871444798;
        iArr[253] = 943393587;
        iArr[254] = 1208633922;
        iArr[255] = -1271429197;
        SS1 = iArr;
        iArr = new int[256];
        iArr[0] = -1582814839;
        iArr[1] = -2122054267;
        iArr[2] = -757852474;
        iArr[3] = -741338173;
        iArr[4] = 1347687492;
        iArr[5] = 287055117;
        iArr[6] = -1599329140;
        iArr[7] = 556016901;
        iArr[8] = 1364991309;
        iArr[9] = 1128268611;
        iArr[10] = 270014472;
        iArr[11] = 303832590;
        iArr[12] = 1364201793;
        iArr[13] = -251904820;
        iArr[14] = -1027077430;
        iArr[15] = 1667244867;
        iArr[16] = 539502600;
        iArr[17] = 1078199364;
        iArr[18] = 538976256;
        iArr[19] = -1852039795;
        iArr[20] = -522182464;
        iArr[21] = -488627518;
        iArr[22] = -1060632376;
        iArr[23] = 320083719;
        iArr[24] = -1583078011;
        iArr[25] = -2087972977;
        iArr[26] = 50332419;
        iArr[27] = 1937259339;
        iArr[28] = -1279771765;
        iArr[29] = 319820547;
        iArr[30] = -758115646;
        iArr[31] = -487838002;
        iArr[32] = 1886400576;
        iArr[33] = -2138305396;
        iArr[34] = 859586319;
        iArr[35] = -1599592312;
        iArr[36] = 842019330;
        iArr[37] = -774103603;
        iArr[38] = -218876218;
        iArr[39] = 1886663748;
        iArr[40] = -521392948;
        iArr[41] = -1852566139;
        iArr[42] = 50858763;
        iArr[43] = 1398019911;
        iArr[44] = 1348213836;
        iArr[45] = 1398283083;
        iArr[46] = -1313063539;
        iArr[47] = 16777473;
        iArr[48] = 539239428;
        iArr[49] = 270277644;
        iArr[50] = 1936732995;
        iArr[51] = -1869080440;
        iArr[52] = 269488128;
        iArr[53] = -1060369204;
        iArr[54] = -219139390;
        iArr[55] = -774366775;
        iArr[56] = 539765772;
        iArr[57] = -471586873;
        iArr[58] = 1919955522;
        iArr[59] = -2088762493;
        iArr[60] = -1818748021;
        iArr[61] = -774893119;
        iArr[62] = -2105276794;
        iArr[63] = -1043854903;
        iArr[64] = 1616912448;
        iArr[65] = 1347424320;
        iArr[66] = -1549786237;
        iArr[67] = -471323701;
        iArr[68] = 17566989;
        iArr[69] = -1296812410;
        iArr[70] = -1835262322;
        iArr[71] = 1129058127;
        iArr[72] = -1280034937;
        iArr[73] = 1381505610;
        iArr[74] = -1027340602;
        iArr[75] = 1886926920;
        iArr[76] = -1566300538;
        iArr[77] = 303043074;
        iArr[78] = -1548996721;
        iArr[79] = -774629947;
        iArr[80] = 1633689921;
        iArr[81] = -1010826301;
        iArr[82] = -1330367356;
        iArr[83] = 1094713665;
        iArr[84] = 1380979266;
        iArr[85] = 1903967565;
        iArr[86] = -2121527923;
        iArr[87] = 526344;
        iArr[88] = 320610063;
        iArr[89] = -1852302967;
        iArr[91] = 286791945;
        iArr[92] = 263172;
        iArr[93] = 1397756739;
        iArr[94] = -202098745;
        iArr[95] = -505404991;
        iArr[96] = -235127347;
        iArr[97] = 1920218694;
        iArr[98] = 590098191;
        iArr[99] = 589571847;
        iArr[100] = -1330630528;
        iArr[101] = -2088236149;
        iArr[102] = 34344462;
        iArr[103] = -1549259893;
        iArr[104] = -1566563710;
        iArr[105] = 1651256910;
        iArr[106] = -1819274365;
        iArr[107] = 1095503181;
        iArr[108] = 1634216265;
        iArr[109] = 1887190092;
        iArr[110] = 17303817;
        iArr[111] = 34081290;
        iArr[112] = -1279508593;
        iArr[113] = -471060529;
        iArr[114] = -202361917;
        iArr[115] = -1044118075;
        iArr[116] = -2088499321;
        iArr[117] = 269751300;
        iArr[118] = -218349874;
        iArr[119] = 1617175620;
        iArr[120] = -757326130;
        iArr[121] = 573320718;
        iArr[122] = 1128794955;
        iArr[123] = 303569418;
        iArr[MetadataChangeSet.CUSTOM_PROPERTY_SIZE_LIMIT_BYTES] = 33818118;
        iArr[125] = 555753729;
        iArr[TransportMediator.KEYCODE_MEDIA_PLAY] = 1667771211;
        iArr[TransportMediator.KEYCODE_MEDIA_PAUSE] = 1650730566;
        iArr[128] = 33554946;
        iArr[129] = -235653691;
        iArr[TransportMediator.KEYCODE_MEDIA_RECORD] = -1836051838;
        iArr[131] = -2105013622;
        iArr[132] = 789516;
        iArr[133] = -1280298109;
        iArr[134] = 1920745038;
        iArr[135] = -791670592;
        iArr[136] = 1920481866;
        iArr[137] = 1128531783;
        iArr[138] = -1835788666;
        iArr[139] = -505141819;
        iArr[140] = 572794374;
        iArr[141] = -2139094912;
        iArr[142] = -1582551667;
        iArr[143] = -740548657;
        iArr[144] = -1583341183;
        iArr[145] = 808464384;
        iArr[146] = 859059975;
        iArr[147] = -1565774194;
        iArr[148] = 842282502;
        iArr[149] = 286528773;
        iArr[150] = 572531202;
        iArr[151] = 808990728;
        iArr[152] = -252431164;
        iArr[153] = -1549523065;
        iArr[154] = 1094976837;
        iArr[155] = 1078725708;
        iArr[156] = -2122317439;
        iArr[157] = -504878647;
        iArr[158] = -2138831740;
        iArr[159] = -1819011193;
        iArr[160] = 825505029;
        iArr[161] = -1010299957;
        iArr[162] = -1026814258;
        iArr[163] = 809253900;
        iArr[164] = 1903178049;
        iArr[165] = 286265601;
        iArr[166] = -1010563129;
        iArr[167] = -2121791095;
        iArr[168] = 1903441221;
        iArr[169] = -201835573;
        iArr[170] = -757589302;
        iArr[171] = -252167992;
        iArr[172] = -1869343612;
        iArr[173] = 1364728137;
        iArr[174] = -2105539966;
        iArr[175] = -1060895548;
        iArr[176] = -201572401;
        iArr[177] = 1095240009;
        iArr[178] = 825768201;
        iArr[179] = 1667508039;
        iArr[180] = -1061158720;
        iArr[181] = -1010036785;
        iArr[182] = -741075001;
        iArr[183] = -1330104184;
        iArr[184] = 51121935;
        iArr[185] = -2104750450;
        iArr[186] = 1111491138;
        iArr[187] = 589308675;
        iArr[188] = -1852829311;
        iArr[189] = 1617701964;
        iArr[190] = -740811829;
        iArr[191] = -1599855484;
        iArr[192] = 808727556;
        iArr[193] = -235916863;
        iArr[194] = 1078462536;
        iArr[195] = -1027603774;
        iArr[196] = 1668034383;
        iArr[197] = 826031373;
        iArr[198] = 556543245;
        iArr[199] = 1077936192;
        iArr[200] = -1296286066;
        iArr[201] = 842808846;
        iArr[202] = -1329841012;
        iArr[203] = -1044381247;
        iArr[204] = -1566037366;
        iArr[205] = -1296549238;
        iArr[206] = 1112280654;
        iArr[207] = 1364464965;
        iArr[208] = 859323147;
        iArr[209] = -790881076;
        iArr[210] = 1617438792;
        iArr[211] = 1937522511;
        iArr[212] = -1868817268;
        iArr[213] = -791144248;
        iArr[214] = 1112017482;
        iArr[215] = 1381242438;
        iArr[216] = 1936996167;
        iArr[217] = -1600118656;
        iArr[218] = -504615475;
        iArr[219] = 1111754310;
        iArr[220] = -1313589883;
        iArr[221] = 589835019;
        iArr[222] = 1633953093;
        iArr[223] = -218613046;
        iArr[224] = -471850045;
        iArr[225] = -1313326711;
        iArr[226] = -1313853055;
        iArr[227] = -1818484849;
        iArr[228] = 1381768782;
        iArr[229] = -235390519;
        iArr[230] = -488364346;
        iArr[231] = -1297075582;
        iArr[232] = 825241857;
        iArr[233] = -488101174;
        iArr[234] = 1634479437;
        iArr[235] = 1398546255;
        iArr[236] = -521919292;
        iArr[237] = -252694336;
        iArr[238] = -1043591731;
        iArr[239] = -2138568568;
        iArr[240] = 303306246;
        iArr[241] = 842545674;
        iArr[242] = 1347950664;
        iArr[243] = -791407420;
        iArr[244] = 1650467394;
        iArr[245] = 556280073;
        iArr[246] = 50595591;
        iArr[247] = 858796803;
        iArr[248] = -521656120;
        iArr[249] = 320346891;
        iArr[250] = 17040645;
        iArr[251] = 1903704393;
        iArr[252] = -1869606784;
        iArr[253] = 1650993738;
        iArr[254] = 573057546;
        iArr[255] = -1835525494;
        SS2 = iArr;
        int[] iArr2 = new int[256];
        iArr2[0] = 137377848;
        iArr2[1] = -924784600;
        iArr2[2] = 220277805;
        iArr2[3] = -2036161498;
        iArr2[4] = -809251825;
        iArr2[5] = -825041890;
        iArr2[6] = -2085375949;
        iArr2[7] = -2001684424;
        iArr2[8] = -1885098961;
        iArr2[9] = 1080057888;
        iArr2[10] = 1162957845;
        iArr2[11] = -943471609;
        iArr2[12] = 1145062404;
        iArr2[13] = 1331915823;
        iArr2[14] = 1264805931;
        iArr2[15] = 1263753243;
        iArr2[16] = -1010581501;
        iArr2[17] = 1113743394;
        iArr2[18] = 53686323;
        iArr2[19] = -2051951563;
        iArr2[20] = 153167913;
        iArr2[21] = -2136956896;
        iArr2[22] = -1025318878;
        iArr2[23] = -2019318745;
        iArr2[24] = -1009528813;
        iArr2[25] = -2121166831;
        iArr2[26] = 17895441;
        iArr2[27] = 100795398;
        iArr2[28] = 202382364;
        iArr2[29] = -1934574532;
        iArr2[30] = 103953462;
        iArr2[31] = 1262700555;
        iArr2[32] = -807146449;
        iArr2[33] = -2004842488;
        iArr2[34] = 1281387564;
        iArr2[35] = -2002737112;
        iArr2[36] = 118690839;
        iArr2[37] = -993999868;
        iArr2[38] = 101848086;
        iArr2[39] = -990841804;
        iArr2[40] = -1027424254;
        iArr2[41] = 1161905157;
        iArr2[42] = -1042161631;
        iArr2[43] = -959261674;
        iArr2[44] = 255015999;
        iArr2[45] = 221330493;
        iArr2[46] = -1904047090;
        iArr2[47] = -2003789800;
        iArr2[48] = 136325160;
        iArr2[49] = 1312967694;
        iArr2[50] = -957156298;
        iArr2[51] = 238173246;
        iArr2[52] = -2053004251;
        iArr2[53] = -906889159;
        iArr2[54] = 218172429;
        iArr2[55] = -808199137;
        iArr2[56] = -925837288;
        iArr2[57] = 186853419;
        iArr2[58] = 1180853286;
        iArr2[59] = 1249015866;
        iArr2[60] = 119743527;
        iArr2[61] = 253963311;
        iArr2[62] = -1041108943;
        iArr2[63] = 1114796082;
        iArr2[64] = 1111638018;
        iArr2[65] = -992947180;
        iArr2[66] = 1094795265;
        iArr2[67] = -1061109760;
        iArr2[68] = 1131638835;
        iArr2[69] = 1197696039;
        iArr2[70] = -1935627220;
        iArr2[71] = -1954314229;
        iArr2[72] = -940313545;
        iArr2[73] = -1918784467;
        iArr2[74] = -2139062272;
        iArr2[75] = 252910623;
        iArr2[76] = -893204470;
        iArr2[77] = 203435052;
        iArr2[78] = -1969051606;
        iArr2[79] = 70267956;
        iArr2[80] = -1026371566;
        iArr2[81] = 184748043;
        iArr2[82] = -823989202;
        iArr2[83] = -907941847;
        iArr2[84] = 1297177629;
        iArr2[85] = -2070899692;
        iArr2[86] = 135272472;
        iArr2[87] = -923731912;
        iArr2[88] = 1196643351;
        iArr2[89] = -1901941714;
        iArr2[90] = 134219784;
        iArr2[91] = -977157115;
        iArr2[92] = 51580947;
        iArr2[93] = -842937331;
        iArr2[94] = -2038266874;
        iArr2[95] = -1984841671;
        iArr2[96] = -806093761;
        iArr2[97] = 1299283005;
        iArr2[98] = -1044267007;
        iArr2[99] = 20000817;
        iArr2[100] = -973999051;
        iArr2[101] = -1971156982;
        iArr2[102] = 1247963178;
        iArr2[103] = -2119061455;
        iArr2[104] = -1043214319;
        iArr2[105] = 2105376;
        iArr2[106] = -942418921;
        iArr2[107] = 33685506;
        iArr2[108] = 35790882;
        iArr2[109] = 67109892;
        iArr2[110] = 1214277672;
        iArr2[111] = 1097953329;
        iArr2[112] = 117638151;
        iArr2[113] = -875309029;
        iArr2[114] = -1919837155;
        iArr2[115] = -1986947047;
        iArr2[116] = 1096900641;
        iArr2[117] = -1900889026;
        iArr2[118] = -958208986;
        iArr2[119] = 1230067737;
        iArr2[120] = -841884643;
        iArr2[121] = 1095847953;
        iArr2[122] = -2138009584;
        iArr2[123] = -858727396;
        iArr2[MetadataChangeSet.CUSTOM_PROPERTY_SIZE_LIMIT_BYTES] = -1970104294;
        iArr2[125] = -2086428637;
        iArr2[TransportMediator.KEYCODE_MEDIA_PLAY] = -1952208853;
        iArr2[TransportMediator.KEYCODE_MEDIA_PAUSE] = -1060057072;
        iArr2[128] = -2122219519;
        iArr2[129] = 251857935;
        iArr2[TransportMediator.KEYCODE_MEDIA_RECORD] = 1195590663;
        iArr2[131] = 168957978;
        iArr2[132] = -1008476125;
        iArr2[133] = -857674708;
        iArr2[134] = -1920889843;
        iArr2[135] = -1884046273;
        iArr2[136] = -2037214186;
        iArr2[137] = 1265858619;
        iArr2[138] = 1280334876;
        iArr2[139] = -2103271390;
        iArr2[140] = -2120114143;
        iArr2[141] = 1130586147;
        iArr2[142] = 52633635;
        iArr2[143] = 1296124941;
        iArr2[144] = -926889976;
        iArr2[145] = -1902994402;
        iArr2[146] = -1936679908;
        iArr2[147] = 171063354;
        iArr2[148] = 201329676;
        iArr2[149] = 237120558;
        iArr2[150] = -1967998918;
        iArr2[151] = 1315073070;
        iArr2[152] = -1886151649;
        iArr2[153] = 1246910490;
        iArr2[154] = -1024266190;
        iArr2[155] = -2104324078;
        iArr2[156] = -1007423437;
        iArr2[157] = 1229015049;
        iArr2[158] = 1215330360;
        iArr2[159] = -859780084;
        iArr2[160] = 85005333;
        iArr2[161] = -873203653;
        iArr2[162] = 1081110576;
        iArr2[163] = 1165063221;
        iArr2[164] = 1332968511;
        iArr2[165] = 87110709;
        iArr2[166] = 1052688;
        iArr2[167] = 50528259;
        iArr2[168] = 1147167780;
        iArr2[169] = 1298230317;
        iArr2[170] = -960314362;
        iArr2[171] = 1148220468;
        iArr2[172] = -976104427;
        iArr2[173] = -2068794316;
        iArr2[174] = -891099094;
        iArr2[175] = 151062537;
        iArr2[176] = 1181905974;
        iArr2[177] = 152115225;
        iArr2[178] = -822936514;
        iArr2[179] = 1077952512;
        iArr2[180] = 34738194;
        iArr2[181] = -1059004384;
        iArr2[182] = -1917731779;
        iArr2[183] = 83952645;
        iArr2[184] = -890046406;
        iArr2[185] = 16842753;
        iArr2[186] = -1057951696;
        iArr2[187] = 170010666;
        iArr2[188] = 1314020382;
        iArr2[189] = -1985894359;
        iArr2[190] = 1179800598;
        iArr2[191] = 1128480771;
        iArr2[192] = -2055109627;
        iArr2[193] = 68162580;
        iArr2[194] = -1987999735;
        iArr2[195] = -1953261541;
        iArr2[196] = -2135904208;
        iArr2[197] = -975051739;
        iArr2[198] = 1212172296;
        iArr2[199] = 1232173113;
        iArr2[200] = -2020371433;
        iArr2[201] = -856622020;
        iArr2[202] = 236067870;
        iArr2[203] = -2105376766;
        iArr2[204] = 18948129;
        iArr2[205] = -1937732596;
        iArr2[206] = 185800731;
        iArr2[207] = 1330863135;
        iArr2[208] = 1198748727;
        iArr2[209] = 1146115092;
        iArr2[210] = -2102218702;
        iArr2[211] = 219225117;
        iArr2[212] = 86058021;
        iArr2[213] = 1329810447;
        iArr2[215] = 1178747910;
        iArr2[216] = -840831955;
        iArr2[217] = 1213224984;
        iArr2[218] = 1112690706;
        iArr2[219] = -874256341;
        iArr2[220] = 1316125758;
        iArr2[221] = -892151782;
        iArr2[222] = -910047223;
        iArr2[223] = -839779267;
        iArr2[224] = 3158064;
        iArr2[225] = -2054056939;
        iArr2[226] = 1164010533;
        iArr2[227] = 204487740;
        iArr2[228] = -2035108810;
        iArr2[229] = -991894492;
        iArr2[230] = -1951156165;
        iArr2[231] = 1282440252;
        iArr2[232] = 235015182;
        iArr2[233] = 1079005200;
        iArr2[234] = 154220601;
        iArr2[235] = 102900774;
        iArr2[236] = 36843570;
        iArr2[237] = -2071952380;
        iArr2[238] = 1231120425;
        iArr2[239] = -2087481325;
        iArr2[240] = 120796215;
        iArr2[241] = -941366233;
        iArr2[242] = 69215268;
        iArr2[243] = -2069847004;
        iArr2[244] = -876361717;
        iArr2[245] = 1129533459;
        iArr2[246] = 167905290;
        iArr2[247] = -2021424121;
        iArr2[248] = -908994535;
        iArr2[249] = 1279282188;
        iArr2[250] = -2088534013;
        iArr2[251] = -1887204337;
        iArr2[252] = -826094578;
        iArr2[253] = 187906107;
        iArr2[254] = 1245857802;
        iArr2[255] = -2018266057;
        SS3 = iArr2;
    }

    private static void EndianChange(int[] iArr) {
        iArr[0] = (((iArr[0] >>> 24) | (iArr[0] << 24)) | ((iArr[0] << 8) & 16711680)) | ((iArr[0] >>> 8) & MotionEventCompat.ACTION_POINTER_INDEX_MASK);
    }

    private static void SeedRound(int[] iArr, int[] iArr2, int[] iArr3, int[] iArr4, int[] iArr5) {
        int i = iArr3[0] ^ iArr5[0];
        int i2 = (iArr4[0] ^ iArr5[1]) ^ i;
        long j = i >= 0 ? (long) i : ((long) (i & Integer.MAX_VALUE)) | -2147483648L;
        i = ((SS0[GetB0(i2)] ^ SS1[GetB1(i2)]) ^ SS2[GetB2(i2)]) ^ SS3[GetB3(i2)];
        long j2 = i >= 0 ? (long) i : ((long) (i & Integer.MAX_VALUE)) | -2147483648L;
        int i3 = (int) (j + j2);
        int i4 = ((SS0[GetB0(i3)] ^ SS1[GetB1(i3)]) ^ SS2[GetB2(i3)]) ^ SS3[GetB3(i3)];
        j = i4 >= 0 ? (long) i4 : ((long) (i4 & Integer.MAX_VALUE)) | -2147483648L;
        i2 = (int) (j2 + j);
        i = ((SS0[GetB0(i2)] ^ SS1[GetB1(i2)]) ^ SS2[GetB2(i2)]) ^ SS3[GetB3(i2)];
        j2 = i >= 0 ? (long) i : ((long) (i & Integer.MAX_VALUE)) | -2147483648L;
        iArr[0] = iArr[0] ^ ((int) (j + j2));
        iArr2[0] = iArr2[0] ^ ((int) j2);
    }

    public static void SeedEncrypt(byte[] bArr, int i, int[] iArr, int i2) {
        int[] iArr2 = new int[1];
        int[] iArr3 = new int[1];
        int[] iArr4 = new int[1];
        int[] iArr5 = new int[]{0};
        iArr3[0] = 0;
        iArr4[0] = 0;
        iArr5[0] = 0;
        int[] iArr6 = new int[]{bArr[i + 0] & 255, (iArr2[0] << 8) ^ (bArr[i + 1] & 255)};
        iArr2[0] = (iArr2[0] << 8) ^ (bArr[i + 2] & 255);
        iArr2[0] = (iArr2[0] << 8) ^ (bArr[i + 3] & 255);
        iArr3[0] = bArr[i + 4] & 255;
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[i + 5] & 255);
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[i + 6] & 255);
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[i + 7] & 255);
        iArr4[0] = bArr[i + 8] & 255;
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[i + 9] & 255);
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[i + 10] & 255);
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[i + 11] & 255);
        iArr5[0] = bArr[i + 12] & 255;
        iArr5[0] = (iArr5[0] << 8) ^ (bArr[i + 13] & 255);
        iArr5[0] = (iArr5[0] << 8) ^ (bArr[i + 14] & 255);
        iArr5[0] = (bArr[i + 15] & 255) ^ (iArr5[0] << 8);
        if (!ENDIAN.booleanValue()) {
            EndianChange(iArr2);
            EndianChange(iArr3);
            EndianChange(iArr4);
            EndianChange(iArr5);
        }
        iArr6[0] = iArr[0];
        iArr6[1] = iArr[1];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[2];
        iArr6[1] = iArr[3];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[0] = iArr[4];
        iArr6[1] = iArr[5];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[6];
        iArr6[1] = iArr[7];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[0] = iArr[8];
        iArr6[1] = iArr[9];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[10];
        iArr6[1] = iArr[11];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[0] = iArr[12];
        iArr6[1] = iArr[13];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[14];
        iArr6[1] = iArr[15];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[0] = iArr[16];
        iArr6[1] = iArr[17];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[18];
        iArr6[1] = iArr[19];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[0] = iArr[20];
        iArr6[1] = iArr[21];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[22];
        iArr6[1] = iArr[23];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[0] = iArr[24];
        iArr6[1] = iArr[25];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[26];
        iArr6[1] = iArr[27];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[0] = iArr[28];
        iArr6[1] = iArr[29];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[0] = iArr[30];
        iArr6[1] = iArr[31];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        if (!ENDIAN.booleanValue()) {
            EndianChange(iArr2);
            EndianChange(iArr3);
            EndianChange(iArr4);
            EndianChange(iArr5);
        }
        for (int i3 = 0; i3 < 4; i3++) {
            int i4 = (3 - i3) * 8;
            bArr[i2 + i3] = (byte) ((iArr4[0] >>> i4) & 255);
            bArr[(i2 + 4) + i3] = (byte) ((iArr5[0] >>> i4) & 255);
            bArr[(i2 + 8) + i3] = (byte) ((iArr2[0] >>> i4) & 255);
            bArr[(i2 + 12) + i3] = (byte) ((iArr3[0] >>> i4) & 255);
        }
    }

    public static void SeedDecrypt(byte[] bArr, int i, int[] iArr, byte[] bArr2, int i2) {
        int[] iArr2 = new int[1];
        int[] iArr3 = new int[1];
        int[] iArr4 = new int[1];
        int[] iArr5 = new int[1];
        int[] iArr6 = new int[]{0, 0};
        iArr4[0] = 0;
        iArr5[0] = 0;
        iArr2[0] = bArr[i + 0] & 255;
        iArr2[0] = (iArr2[0] << 8) ^ (bArr[i + 1] & 255);
        iArr2[0] = (iArr2[0] << 8) ^ (bArr[i + 2] & 255);
        iArr2[0] = (iArr2[0] << 8) ^ (bArr[i + 3] & 255);
        iArr3[0] = bArr[i + 4] & 255;
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[i + 5] & 255);
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[i + 6] & 255);
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[i + 7] & 255);
        iArr4[0] = bArr[i + 8] & 255;
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[i + 9] & 255);
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[i + 10] & 255);
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[i + 11] & 255);
        iArr5[0] = bArr[i + 12] & 255;
        iArr5[0] = (iArr5[0] << 8) ^ (bArr[i + 13] & 255);
        iArr5[0] = (iArr5[0] << 8) ^ (bArr[i + 14] & 255);
        iArr5[0] = (bArr[i + 15] & 255) ^ (iArr5[0] << 8);
        if (!ENDIAN.booleanValue()) {
            EndianChange(iArr2);
            EndianChange(iArr3);
            EndianChange(iArr4);
            EndianChange(iArr5);
        }
        iArr6[1] = iArr[31];
        iArr6[0] = iArr[30];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[29];
        iArr6[0] = iArr[28];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[1] = iArr[27];
        iArr6[0] = iArr[26];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[25];
        iArr6[0] = iArr[24];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[1] = iArr[23];
        iArr6[0] = iArr[22];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[21];
        iArr6[0] = iArr[20];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[1] = iArr[19];
        iArr6[0] = iArr[18];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[17];
        iArr6[0] = iArr[16];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[1] = iArr[15];
        iArr6[0] = iArr[14];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[13];
        iArr6[0] = iArr[12];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[1] = iArr[11];
        iArr6[0] = iArr[10];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[9];
        iArr6[0] = iArr[8];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[1] = iArr[7];
        iArr6[0] = iArr[6];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[5];
        iArr6[0] = iArr[4];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        iArr6[1] = iArr[3];
        iArr6[0] = iArr[2];
        SeedRound(iArr2, iArr3, iArr4, iArr5, iArr6);
        iArr6[1] = iArr[1];
        iArr6[0] = iArr[0];
        SeedRound(iArr4, iArr5, iArr2, iArr3, iArr6);
        if (!ENDIAN.booleanValue()) {
            EndianChange(iArr2);
            EndianChange(iArr3);
            EndianChange(iArr4);
            EndianChange(iArr5);
        }
        for (int i3 = 0; i3 < 4; i3++) {
            int i4 = (3 - i3) * 8;
            bArr2[i2 + i3] = (byte) ((iArr4[0] >>> i4) & 255);
            bArr2[(i2 + 4) + i3] = (byte) ((iArr5[0] >>> i4) & 255);
            bArr2[(i2 + 8) + i3] = (byte) ((iArr2[0] >>> i4) & 255);
            bArr2[(i2 + 12) + i3] = (byte) ((iArr3[0] >>> i4) & 255);
        }
    }

    private static void EncRoundKeyUpdate0(int[] iArr, int[] iArr2, int[] iArr3, int[] iArr4, int[] iArr5, int i) {
        int i2 = iArr2[0];
        iArr2[0] = (iArr2[0] >>> 8) ^ (iArr3[0] << 24);
        iArr3[0] = (i2 << 24) ^ (iArr3[0] >>> 8);
        int i3 = (iArr2[0] + iArr4[0]) - KC[i];
        int i4 = (iArr3[0] + KC[i]) - iArr5[0];
        iArr[0] = SS3[GetB3(i3)] ^ ((SS0[GetB0(i3)] ^ SS1[GetB1(i3)]) ^ SS2[GetB2(i3)]);
        iArr[1] = ((SS0[GetB0(i4)] ^ SS1[GetB1(i4)]) ^ SS2[GetB2(i4)]) ^ SS3[GetB3(i4)];
    }

    private static void EncRoundKeyUpdate1(int[] iArr, int[] iArr2, int[] iArr3, int[] iArr4, int[] iArr5, int i) {
        int i2 = iArr4[0];
        iArr4[0] = (iArr4[0] << 8) ^ (iArr5[0] >>> 24);
        iArr5[0] = (i2 >>> 24) ^ (iArr5[0] << 8);
        int i3 = (iArr2[0] + iArr4[0]) - KC[i];
        int i4 = (iArr3[0] + KC[i]) - iArr5[0];
        iArr[0] = SS3[GetB3(i3)] ^ ((SS0[GetB0(i3)] ^ SS1[GetB1(i3)]) ^ SS2[GetB2(i3)]);
        iArr[1] = ((SS0[GetB0(i4)] ^ SS1[GetB1(i4)]) ^ SS2[GetB2(i4)]) ^ SS3[GetB3(i4)];
    }

    public static void SeedRoundKey(int[] iArr, byte[] bArr) {
        int[] iArr2 = new int[1];
        int[] iArr3 = new int[1];
        int[] iArr4 = new int[1];
        int[] iArr5 = new int[1];
        int[] iArr6 = new int[]{bArr[0] & 255, (iArr2[0] << 8) ^ (bArr[1] & 255)};
        iArr2[0] = (iArr2[0] << 8) ^ (bArr[2] & 255);
        iArr2[0] = (iArr2[0] << 8) ^ (bArr[3] & 255);
        iArr3[0] = bArr[4] & 255;
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[5] & 255);
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[6] & 255);
        iArr3[0] = (iArr3[0] << 8) ^ (bArr[7] & 255);
        iArr4[0] = bArr[8] & 255;
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[9] & 255);
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[10] & 255);
        iArr4[0] = (iArr4[0] << 8) ^ (bArr[11] & 255);
        iArr5[0] = bArr[12] & 255;
        iArr5[0] = (iArr5[0] << 8) ^ (bArr[13] & 255);
        iArr5[0] = (iArr5[0] << 8) ^ (bArr[14] & 255);
        iArr5[0] = (bArr[15] & 255) ^ (iArr5[0] << 8);
        if (!ENDIAN.booleanValue()) {
            iArr2[0] = EndianChange(iArr2[0]);
            iArr3[0] = EndianChange(iArr3[0]);
            iArr4[0] = EndianChange(iArr4[0]);
            iArr5[0] = EndianChange(iArr5[0]);
        }
        int i = (iArr2[0] + iArr4[0]) - KC[0];
        int i2 = (iArr3[0] - iArr5[0]) + KC[0];
        iArr[0] = SS3[GetB3(i)] ^ ((SS0[GetB0(i)] ^ SS1[GetB1(i)]) ^ SS2[GetB2(i)]);
        iArr[1] = ((SS0[GetB0(i2)] ^ SS1[GetB1(i2)]) ^ SS2[GetB2(i2)]) ^ SS3[GetB3(i2)];
        int[] iArr7 = iArr6;
        int[] iArr8 = iArr2;
        int[] iArr9 = iArr3;
        int[] iArr10 = iArr4;
        int[] iArr11 = iArr5;
        EncRoundKeyUpdate0(iArr7, iArr8, iArr9, iArr10, iArr11, 1);
        iArr[2] = iArr6[0];
        iArr[3] = iArr6[1];
        EncRoundKeyUpdate1(iArr7, iArr8, iArr9, iArr10, iArr11, 2);
        iArr[4] = iArr6[0];
        iArr[5] = iArr6[1];
        EncRoundKeyUpdate0(iArr7, iArr8, iArr9, iArr10, iArr11, 3);
        iArr[6] = iArr6[0];
        iArr[7] = iArr6[1];
        EncRoundKeyUpdate1(iArr7, iArr8, iArr9, iArr10, iArr11, 4);
        iArr[8] = iArr6[0];
        iArr[9] = iArr6[1];
        EncRoundKeyUpdate0(iArr7, iArr8, iArr9, iArr10, iArr11, 5);
        iArr[10] = iArr6[0];
        iArr[11] = iArr6[1];
        EncRoundKeyUpdate1(iArr7, iArr8, iArr9, iArr10, iArr11, 6);
        iArr[12] = iArr6[0];
        iArr[13] = iArr6[1];
        EncRoundKeyUpdate0(iArr6, iArr8, iArr9, iArr10, iArr11, 7);
        iArr[14] = iArr6[0];
        iArr[15] = iArr6[1];
        EncRoundKeyUpdate1(iArr6, iArr2, iArr9, iArr10, iArr11, 8);
        iArr[16] = iArr6[0];
        iArr[17] = iArr6[1];
        EncRoundKeyUpdate0(iArr6, iArr2, iArr9, iArr10, iArr11, 9);
        iArr[18] = iArr6[0];
        iArr[19] = iArr6[1];
        EncRoundKeyUpdate1(iArr6, iArr2, iArr9, iArr10, iArr11, 10);
        iArr[20] = iArr6[0];
        iArr[21] = iArr6[1];
        EncRoundKeyUpdate0(iArr6, iArr2, iArr9, iArr10, iArr11, 11);
        iArr[22] = iArr6[0];
        iArr[23] = iArr6[1];
        EncRoundKeyUpdate1(iArr6, iArr2, iArr9, iArr10, iArr11, 12);
        iArr[24] = iArr6[0];
        iArr[25] = iArr6[1];
        EncRoundKeyUpdate0(iArr6, iArr2, iArr9, iArr10, iArr11, 13);
        iArr[26] = iArr6[0];
        iArr[27] = iArr6[1];
        EncRoundKeyUpdate1(iArr6, iArr2, iArr9, iArr10, iArr11, 14);
        iArr[28] = iArr6[0];
        iArr[29] = iArr6[1];
        EncRoundKeyUpdate0(iArr6, iArr2, iArr9, iArr10, iArr11, 15);
        iArr[30] = iArr6[0];
        iArr[31] = iArr6[1];
    }

    public static void SeedXoringData(byte[] bArr, int i, byte[] bArr2) {
        for (int i2 = 0; i2 < 16; i2++) {
            int i3 = i + i2;
            bArr[i3] = (byte) (bArr[i3] ^ bArr2[i2]);
        }
    }
}
